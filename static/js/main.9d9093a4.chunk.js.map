{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions/index.js","actions/constants.js","reducers/index.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","className","alt","src","this","props","id","name","email","PureComponent","CardList","robots","length","map","robot","i","key","SearchBox","searchChange","onChange","type","placeholder","Scroll","style","overflow","border","height","children","ErrorBoundary","hasError","setState","CounterButton","count","updateCount","color","onClick","Header","nextProps","nextState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","React","connect","searchRobotsReducer","requestRobotsReducer","dispatch","event","payload","target","value","fetch","response","json","data","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9d9093a4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {PureComponent} from 'react';\r\n\r\n\r\nclass Card extends PureComponent {\r\n    render() {\r\n        return (\r\n            <div className ='bg-animate hover-bg-light-blue tc bw2 shadow5 bg-light-green dib br3 pa3 ma2 grow'>\r\n                <img alt='robots' src={`https://robohash.org/${this.props.id}?200x200`}/>\r\n                <h2>{this.props.name}</h2>\r\n                <p>{this.props.email}</p>\r\n                \r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;","import Card from './Card'\r\nimport React from 'react';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    console.log('cardlist rendered');\r\n    return !robots.length > 0 \r\n        ? <h1 className = 'tc'> Loading...</h1>\r\n        : (\r\n            <div>\r\n                {   \r\n                    robots.map((robot, i) => {\r\n                        \r\n                        return (\r\n                            <Card \r\n                                key = {i} \r\n                                id={robot.id} \r\n                                name={robot.name} \r\n                                email={robot.email} \r\n                            />\r\n                        )\r\n            \r\n                    })\r\n                   \r\n                } \r\n                    \r\n            </div>\r\n            \r\n        )\r\n    \r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    \r\n    console.log('searchbox rendered');\r\n\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                onChange = {searchChange}\r\n                className ='pa3 ba b--green bg-lightest-blue'\r\n                type ='search' \r\n                placeholder ='search robots'\r\n            />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{\r\n            overflow: 'scroll',\r\n            border: '1px solid #0ccac4',\r\n            height: '500px',\r\n        }}>\r\n            {props.children}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {PureComponent} from 'react';\r\n\r\nclass ErrorBoundary extends PureComponent {\r\n    \r\n    state = {\r\n        hasError: false\r\n    }\r\n\r\n    //Lifecycle method runs if there is an error\r\n    componentDidCatch() {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        console.log('boundary loaded')\r\n        return this.state.hasError \r\n            ? <h1>It looks like there was an error.</h1>\r\n            : this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {PureComponent} from 'react';\r\n\r\n//Pure components only update when their props change\r\nclass CounterButton extends PureComponent {\r\n    \r\n    state = {\r\n        count: 0\r\n    }\r\n    // only necessary if not a pure component and you want to restrict rerenders.  Gives more directed control and allows updated based on specific props changes\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     if (this.state.count !== nextState.count) {\r\n    //         return true;\r\n    //     }\r\n    //     return false;\r\n        \r\n    // }\r\n\r\n    updateCount = () => {\r\n        //Here state is passed with a callback function to avoid side effects caused by async state update\r\n        //Useful when modifying current state\r\n        this.setState(state => {\r\n            return {\r\n                count: state.count + 1\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log('counter button rendered');\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>    \r\n        )\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    //Set component to never rerender\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        console.log('header');\r\n        return (\r\n            <div>\r\n                <CounterButton color={'red'} />\r\n                <h1 className='f1'>RoboFriends</h1>\r\n            </div>\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundry';\r\nimport Header from '../components/Header';\r\n\r\n// action imports\r\nimport {setSearchFieldAction, requestRobotsAction} from '../actions';\r\n//Redux imports\r\nimport {connect} from 'react-redux';\r\n//import { requestRobotsReducer } from '../reducers';\r\n\r\nconst mapStateToProps = state => {\r\n    //listen for state changes and send it down as props\r\n    return {\r\n        searchField: state.searchRobotsReducer.searchField,\r\n        robots: state.requestRobotsReducer.robots,\r\n        isPending: state.requestRobotsReducer.isPending,\r\n        error: state.requestRobotsReducer.error\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    //listen for which props are actions that need to be dispatched to reducer\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchFieldAction(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobotsAction())\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n    render() {\r\n        \r\n        //searchField and searchChange now coming from redux store as props\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        \r\n        //Filter the robots to only include those in the searchfield\r\n        let filteredRobots = robots.filter(robot => {   \r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n            \r\n\r\n        return (\r\n            <div className='tc'>\r\n                <Header />\r\n                \r\n                <Scroll>\r\n                    { isPending ? <h1>Loading...</h1>\r\n                        : <ErrorBoundary>\r\n                            <SearchBox searchChange={onSearchChange}/>\r\n                            <CardList robots={filteredRobots}/> \r\n                        </ErrorBoundary>\r\n                    }\r\n                </Scroll>\r\n                \r\n            </div>\r\n        )  \r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchFieldAction = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobotsAction = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            dispatch({\r\n                type: REQUEST_ROBOTS_SUCCESS,\r\n                payload: data\r\n            })\r\n        })\r\n        .catch(error => dispatch({\r\n            type: REQUEST_ROBOTS_FAILED,\r\n            payload: error\r\n        }))\r\n        \r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from \"../actions/constants\";\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const searchRobotsReducer = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n        return {\r\n            ...state,\r\n            searchField: action.payload\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const requestRobotsReducer = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n        return {\r\n            ...state,\r\n            isPending: true\r\n        }\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n        return {\r\n            ...state,\r\n            isPending: false,\r\n            robots: action.payload\r\n        }\r\n        case REQUEST_ROBOTS_FAILED:\r\n        return {\r\n            ...state,\r\n            isPending: false\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport 'tachyons';\nimport App from './containers/App';\nimport './styles/App.css';\nimport { searchRobotsReducer, requestRobotsReducer } from './reducers';\n\nconst rootReducer = combineReducers({\n  searchRobotsReducer,\n  requestRobotsReducer\n})\n\nconst store = createStore(rootReducer, composeWithDevTools(\n  applyMiddleware(thunkMiddleware),\n))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}> \n      <App  />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n\n"],"sourceRoot":""}