{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions/index.js","actions/constants.js","reducers/index.js","index.js"],"names":["Card","className","alt","src","this","props","id","name","email","Component","CardList","robots","length","map","robot","i","key","SearchBox","searchChange","onChange","type","placeholder","Scroll","style","overflow","border","height","children","ErrorBoundry","state","hasError","setState","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","React","connect","searchRobotsReducer","requestRobotsReducer","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.794f8824.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nclass Card extends Component {\r\n    render() {\r\n        return (\r\n            <div className ='bg-animate hover-bg-light-blue tc bw2 shadow5 bg-light-green dib br3 pa3 ma2 grow'>\r\n                <img alt='robots' src={`https://robohash.org/${this.props.id}?200x200`}/>\r\n                <h2>{this.props.name}</h2>\r\n                <p>{this.props.email}</p>\r\n                \r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;","import Card from './Card'\r\nimport React from 'react';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    return !robots.length > 0 \r\n        ? <h1 className = 'tc'> Loading...</h1>\r\n        : (\r\n            <div>\r\n                {   \r\n                    robots.map((robot, i) => {\r\n                        \r\n                        return (\r\n                            <Card \r\n                                key = {i} \r\n                                id={robot.id} \r\n                                name={robot.name} \r\n                                email={robot.email} \r\n                            />\r\n                        )\r\n            \r\n                    })\r\n                   \r\n                } \r\n                    \r\n            </div>\r\n            \r\n        )\r\n    \r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    \r\n    \r\n\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                onChange = {searchChange}\r\n                className ='pa3 ba b--green bg-lightest-blue'\r\n                type ='search' \r\n                placeholder ='search robots'\r\n            />\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{\r\n            overflow: 'scroll',\r\n            border: '1px solid #0ccac4',\r\n            height: '500px',\r\n        }}>\r\n            {props.children}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    \r\n    state = {\r\n        hasError: false\r\n    }\r\n\r\n    //Lifecycle method runs if there is an error\r\n    componentDidCatch() {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        \r\n        return this.state.hasError \r\n            ? <h1>It looks like there was an error.</h1>\r\n            : this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n// action imports\r\nimport {setSearchFieldAction, requestRobotsAction} from '../actions';\r\n//Redux imports\r\nimport {connect} from 'react-redux';\r\n//import { requestRobotsReducer } from '../reducers';\r\n\r\nconst mapStateToProps = state => {\r\n    //listen for state changes and send it down as props\r\n    return {\r\n        searchField: state.searchRobotsReducer.searchField,\r\n        robots: state.requestRobotsReducer.robots,\r\n        isPending: state.requestRobotsReducer.isPending,\r\n        error: state.requestRobotsReducer.error\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    //listen for which props are actions that need to be dispatched to reducer\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchFieldAction(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobotsAction())\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n    render() {\r\n        \r\n        //searchField and searchChange now coming from redux store as props\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        \r\n        //Filter the robots to only include those in the searchfield\r\n        let filteredRobots = robots.filter(robot => {   \r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n            \r\n\r\n        return !isPending ? (\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={onSearchChange}/>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n                \r\n            </div>)\r\n            : null\r\n            \r\n        \r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchFieldAction = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobotsAction = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING})\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            dispatch({\r\n                type: REQUEST_ROBOTS_SUCCESS,\r\n                payload: data\r\n            })\r\n        })\r\n        .catch(error => dispatch({\r\n            type: REQUEST_ROBOTS_FAILED,\r\n            payload: error\r\n        }))\r\n        \r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n } from \"../actions/constants\";\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const searchRobotsReducer = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n        return {\r\n            ...state,\r\n            searchField: action.payload\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const requestRobotsReducer = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n        return {\r\n            ...state,\r\n            isPending: true\r\n        }\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n        return {\r\n            ...state,\r\n            isPending: false,\r\n            robots: action.payload\r\n        }\r\n        case REQUEST_ROBOTS_FAILED:\r\n        return {\r\n            ...state,\r\n            isPending: false\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport 'tachyons';\nimport App from './containers/App';\nimport './styles/App.css';\nimport { searchRobotsReducer, requestRobotsReducer } from './reducers';\n\nconst rootReducer = combineReducers({\n  searchRobotsReducer,\n  requestRobotsReducer\n})\n\nconst store = createStore(rootReducer, composeWithDevTools(\n  applyMiddleware(thunkMiddleware),\n))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}> \n      <App  />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}